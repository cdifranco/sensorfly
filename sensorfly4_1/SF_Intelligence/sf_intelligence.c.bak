/******************************************************************************
*  SensorFly, a controlled-mobile sensor networking platform.
*  Copyright (C) 2010, Carnegie Mellon University
*  All rights reserved.
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, version 2.0 of the License.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*******************************************************************************/

#include <stdio.h>
#include <string.h>
#include "../common/sensorfly.h"
#include "sf_intelligence.h"

unsigned int task_get_position_stack[TASK_GET_POSITION_STK_SIZE];
TN_TCB task_get_position;

uint8_t macAddressOfO=10;
uint8_t macAddressOfX=20;
uint8_t macAddressOfY=30;
uint8_t macAddressOfS=40;



uint32_t distanceOX=500; //the distance from the fixed origin to the fixed reference point X
uint32_t distanceOY=500; //the distance from the fixed origin to the fixed reference point y
uint32_t distanceXY=0; //the distance from the fixed reference point x to the fixed reference point y

//-----------------------------------------------------------------------------
// Local declarations
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Definitions
//-----------------------------------------------------------------------------

void  sf_get_position_task_init()
{
   //--- Task Get Heading 
   task_get_position.id_task = 0; //!< Must be 0 for all tasks 
   tn_task_create(&task_get_position,            //-- task TCB
                 task_get_position_func,           //-- task function
                 TASK_GET_POSITION_PRIORITY,       //-- task priority
                 &(task_get_position_stack         //-- task stack first addr in memory
                    [TASK_GET_POSITION_STK_SIZE-1]),
                 TASK_GET_POSITION_STK_SIZE,       //-- task stack size (in int,not bytes)
                 NULL,                           //-- task function parameter
                 TN_TASK_START_ON_CREATION     //-- Creation option
                 );

}

uint32_t request_distance(uint8_t dest){
     
     Write_Sf_packet_state ret=no_response;
     Read_Sf_packet_state rec=no_packet;
     Sf_packet rangingData;
     static float rangeResult = 0;
     static float radioDelay=1.3;
     static float radioNoisePercent=.85;
     short gotRange=0;
     ret = sf_network_set_destination_mac_address(dest);
     if(acknowledged != ret){
       return 0;
     }
     while(gotRange==0){
       while(rec!=packet_received){
         ret = sf_network_send_ranging_request();
         rec = sf_network_wait_until_packet_rx ( &rangingData, Sf_packet_unsolicited_message_tag, 10000);
       }
       if (incomming_range_indication==rangingData.type){
         memcpy(&rangeResult, rangingData.params, sizeof(float));
         gotRange=1;
       }
     }
     rangeResult=(rangeResult-radioDelay)*radioNoisePercent*1000;
     return rangeResult;
}
void sf_swarm_system_start()//this function gets the necessary fixed data reference points before the main get position tasks can start
{
  sf_network_set_mac_address(macAddressOfS);
  uint32_t test=0;
  Sf_packet mappingData;
  Read_Sf_packet_state rec=no_packet;
  char testChar;
     uint16_t testRange=0;
  while(distanceOX==0 || distanceOY==0){
     
     
     rec = sf_network_wait_until_packet_rx ( &mappingData, Sf_packet_unsolicited_message_tag, 100000);
     test++;
     if (incomming_data==mappingData.type){
       memcpy(&testChar, mappingData.params, sizeof(char));
       memcpy(&testRange, mappingData.params+sizeof(char), sizeof(uint16_t));
     }
     if (incomming_data_but_source_changed==mappingData.type){
       memcpy(&testChar, mappingData.params+1, sizeof(char));
       memcpy(&testRange, mappingData.params+sizeof(char)+1, sizeof(uint16_t));
     }
     if(testChar=='X'){
        distanceOX=testRange;
     }else if(testChar=='Y'){
        distanceOY=testRange;
      }
      test++;
  }
 // sf_get_position_task_init();
}

void task_get_position_func(void * par)
{
   // sf_swarm_system_start();
    uint32_t height=0, test=0;
    int32_t xCoodSet1=0, yCoodSet1=0, xCoodSet2=0, yCoodSet2=0, xCoodSet3=0, yCoodSet3=0;
    par=par;
    float theta=0;
    static float pi=3.1415926535897932384;
    uint32_t distanceAX=0, distanceAY=0, distanceAO=0;
    sf_network_set_mac_address(macAddressOfS);
    while(1){
        //first get the distance from current location to the 3 reference nodes
        uint8_t xNeg=0, yNeg=0;
        tn_task_sleep(1000);//attempt to get rid of deadlock
        distanceAO=request_distance(macAddressOfO);
        tn_task_sleep(2000);//attempt to get rid of deadlock
        //distanceAX=request_distance(macAddressOfX);
        distanceAY=request_distance(macAddressOfY);
                
        //remove the height from the distance calculated leaving us with the distance as if the node had landed
        //distanceAX=removeHeightComponent(distanceAO, height);
        distanceAY=removeHeightComponent(distanceAY, height);
        distanceAO=removeHeightComponent(distanceAO, height);

        //calculate the first set of coordinates based on node Y and the origin node
        if(distanceAO>0 && distanceAY>0){
          find_theta(distanceAO, distanceOY, distanceAY, &theta);
          if(theta<pi/2){ //if theta is less then pi/2 [an acute angle] then we need to use the complementary angle and the point is located in q1 or q4 (above x axis)
            theta=pi/2-theta;
          }
            else //otherwise the angle is obtuse and the point must lie is q2 or q3(below the x axis)
          {
            theta=theta-pi/2;
            yNeg=1;
          }
          find_coods(distanceAO, &theta, &xCoodSet1, &yCoodSet1);
         }
/*
        //calculate the first set of coordinates based on node X and the origin node
        find_theta(distanceAO, distanceOX, distanceAX, &theta);
        if(theta>pi/2){ //if theta is greater then pi/2 [an obtuse angle] then the point must lie is q3 or q4(left of the y axis)
          theta=pi-theta;
          xNeg=1;
        }
        
        find_coods(distanceAO, &theta, &xCoodSet2, &yCoodSet2);*/
//        xCoodSet1=(xCoodSet1+xCoodSet2)/2;
//        yCoodSet1=(yCoodSet1+yCoodSet2)/2;
        if(yNeg==1){
          yCoodSet1=-yCoodSet1;
        }
        if(xNeg==1){
          xCoodSet1=-xCoodSet1;
        }

        test++;
    }
}


//simple broadcast function for the fixed point nodes 
void task_act_as_base_node_func(void * par)
{
  uint16_t distance=0;
  par = par;

  sf_network_set_mac_address(macAddressOfY);
  while(distance==0){
    distance=request_distance(macAddressOfO);
  }
  sf_network_set_destination_mac_address(macAddressOfS);
  char msg[3]="\0";
  msg[0]='Y';
  memcpy(&msg[1], &distance, sizeof(uint16_t));
  short sendSize=sizeof(msg);
  sf_network_put_radio_in_range_listen_mode();
  while(1){
    sf_network_send_short_msg(msg, sendSize);
    tn_task_sleep(1000);
  }
}
void task_act_as_origin_func(void * par)
{
  par = par;
  Write_Sf_packet_state ret=no_response;
  while(acknowledged != ret){
    ret=sf_network_set_mac_address(macAddressOfO);
  }
  ret=no_response;
  sf_network_set_destination_mac_address(macAddressOfS);
 // while(acknowledged != ret){
    ret=sf_network_put_radio_in_range_listen_mode();
//  }
  char msg[3]="\0";
  msg[0]='R';
  msg[1]='L';
  msg[2]='Y';
  while(1){
     //sf_network_send_short_msg(msg, sizeof(msg));
    // tn_task_sleep(1000);
  }
  
}
